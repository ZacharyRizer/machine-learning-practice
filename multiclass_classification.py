# -*- coding: utf-8 -*-
"""multiclass_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZFyw9273v8sONVxoU-6YysNTf04c5dHw

## Classifying Newswires - _Multiclass Classification Problem_
"""

from tensorflow.keras.datasets import reuters

(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words=10000)

"""Preparing the data"""

import numpy as np

def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        for j in sequence:
            results[i,j] = 1.
    return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

# -- one_hot_encoding by hand
# def to_one_hot(labels, dimension=46):
#     results = np.zeros((len(labels), dimension))
#     for i, label in enumerate(labels):
#         results[i, label] = 1.0
#     return results
#
# y_train = to_one_hot(train_labels)
# y_test = to_one_hot(test_labels)

# Keras built in for the same thing
from tensorflow.keras.utils import to_categorical
y_train = to_categorical(train_labels)
y_test = to_categorical(test_labels)

# another way to handle the labels is to cast to an integer tensor
# for this style of label, you need to use a different loss function, see below
y_train_tensor = np.array(train_labels)
y_test_tensor = np.array(test_labels)

"""Looking at the different formats of the test_labels, y_test, and y_test_tensor"""

test_labels[0: 5]

y_test[0:5]

y_test_tensor[0:5]

"""Building the model
- compared to the binary classification problem, we need bigger layers
- we have 46 categories/outcomes, so rather than 16 node layers, we'll go with bigger internal layers
"""

from tensorflow import keras
from tensorflow.keras import layers

model = keras.Sequential([
    layers.Dense(64, activation="relu"),
    layers.Dense(64, activation="relu"),
    layers.Dense(46, activation="softmax")
])

# if using the integer tensor approach, use "sparse_categorical_crossentropy" for loss
model.compile(optimizer="rmsprop",
              loss="categorical_crossentropy",
              metrics=["accuracy"])

"""Validating the approach"""

x_val = x_train[:1000]
partial_x_train = x_train[1000:]
y_val = y_train[:1000]
partial_y_train = y_train[1000:]

history = model.fit(partial_x_train,
                    partial_y_train,
                    epochs=20,
                    batch_size=512,
                    validation_data=(x_val, y_val))

import matplotlib.pyplot as plt

history_dict = history.history
epochs = range(1,21)
training_loss = history_dict["loss"]
validation_loss = history_dict["val_loss"]
training_acc = history_dict["accuracy"]
validation_acc = history_dict["val_accuracy"]

plt.plot(epochs, training_loss, "bo", label='Training Loss')
plt.plot(epochs, validation_loss, "b", label='Validation Loss')
plt.title('Training vs Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.clf()
plt.plot(epochs, training_acc, "bo", label='Training Accuracy')
plt.plot(epochs, validation_acc, "b", label='Validation Accuracy')
plt.title('Training vs Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

"""The model begins to overfit around nine epochs. Retraining and testing new model."""

model_v2 = keras.Sequential([
    layers.Dense(64, activation="relu"),
    layers.Dense(64, activation="relu"),
    layers.Dense(46, activation="softmax")
])

model_v2.compile(optimizer="rmsprop",
                 loss="categorical_crossentropy",
                 metrics=["accuracy"])

model_v2.fit(x_train,
            y_train,
            epochs=9,
            batch_size=512)

results = model.evaluate(x_test, y_test)

results

"""Generating predictions on new data"""

predictions = model_v2.predict(x_test)

np.sum(predictions[0]) # all prediction probabilities sum to 1

prediction_values = [np.argmax(pred) for pred in predictions]
matched_values = [1 for pred_value, test_value in zip(prediction_values, test_labels) if pred_value == test_value]
match_percentage = len(matched_values) / len(test_labels)

match_percentage