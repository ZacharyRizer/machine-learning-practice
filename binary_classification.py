# -*- coding: utf-8 -*-
"""binary_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9EzeqIddhMwnQRRAxm1sudrzW5wjUla

## Classifying Movie Reviews - _Binary Classification Problem_
"""

from tensorflow.keras.datasets import imdb

(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

"""Because only the top 10,000 most frequent words are being used, no word index will exceed 10,000:"""

max([max(sequence) for sequence in train_data])

"""Cleaning the data - turning into 10,000-dimensional vectors of 0s or 1s"""

import numpy as np

def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        for j in sequence:
            results[i,j] = 1.
    return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

y_train = np.asarray(train_labels).astype("float32")
y_test = np.asarray(test_labels).astype("float32")

"""Building the model"""

from tensorflow import keras
from tensorflow.keras import layers

model = keras.Sequential([
    layers.Dense(16, activation="relu"),
    layers.Dense(16, activation="relu"),
    layers.Dense(1, activation="sigmoid"),
])

model.compile(optimizer="rmsprop",
              loss="binary_crossentropy",
              metrics=["accuracy"])

"""Separating test data into test and validation sets"""

x_val = x_train[:10000]
partial_x_train = x_train[10000:]
y_val = y_train[:10000]
partial_y_train = y_train[10000:]

"""Training the model"""

history = model.fit(
    partial_x_train,
    partial_y_train,
    epochs=20,
    batch_size=512,
    validation_data=(x_val, y_val)
)

"""Plotting training vs validation Loss and Accuracy"""

import matplotlib.pyplot as plt

history_dict = history.history
epochs = range(1,21)
training_loss = history_dict["loss"]
validation_loss = history_dict["val_loss"]
training_acc = history_dict["accuracy"]
validation_acc = history_dict["val_accuracy"]

plt.plot(epochs, validation_loss, label='Validation Loss')
plt.scatter(epochs, training_loss, label='Training Loss')
plt.title('Training vs Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.clf() # clearing the figure
plt.plot(epochs, validation_acc, label='Validation Acc')
plt.scatter(epochs, training_acc, label='Training Acc')
plt.title('Training vs Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

"""Model is overfit, looks to peak around epoch 4 - recreating model"""

model = keras.Sequential([
    layers.Dense(16, activation="relu"),
    layers.Dense(16, activation="relu"),
    layers.Dense(1, activation="sigmoid"),
])

model.compile(optimizer="rmsprop",
              loss="binary_crossentropy",
              metrics=["accuracy"])

model.fit(x_train, y_train, epochs=4, batch_size=512)

results = model.evaluate(x_test, y_test)